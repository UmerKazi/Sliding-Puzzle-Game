{"ast":null,"code":"import _toConsumableArray from \"/Users/umerkazi/Desktop/Year Zero Studios/SlidingPuzzleGame-Master/SlidingPuzzleGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/umerkazi/Desktop/Year Zero Studios/SlidingPuzzleGame-Master/SlidingPuzzleGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/umerkazi/Desktop/Year Zero Studios/SlidingPuzzleGame-Master/SlidingPuzzleGame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar EMPTY = 0;\n\nArray.prototype.swap = function (i, j) {\n  // eslint-disable-line no-extend-native\n  var _ref = [this[j], this[i]];\n  this[i] = _ref[0];\n  this[j] = _ref[1];\n  return this;\n};\n\nvar BoardLogic = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param {*} data can be one of three:\n   * size (number): init matrix with size number*number \n   * matrix: if array use given array as matrix\n   * other: use default size\n   */\n  function BoardLogic(data) {\n    _classCallCheck(this, BoardLogic);\n\n    var DEFAULT_SIZE = 3;\n\n    if (Array.isArray(data)) {\n      // Data is Array\n      this.size = Math.ceil(Math.sqrt(data.length));\n      this.board = _toConsumableArray(data);\n    } else {\n      // Data is number or undefiend\n      this.size = isNaN(data) ? DEFAULT_SIZE : data;\n      this.board = this.initBord(data);\n    }\n  }\n  /**\n  * Gets a new board of the given size\n  * @param {Number} size amount of Boxes per row\n  */\n\n\n  _createClass(BoardLogic, [{\n    key: \"initBord\",\n    value: function initBord(size) {\n      return Array.from({\n        length: size * size\n      }, function (_, b) {\n        return b;\n      });\n    }\n    /**\n     * Getter, return a copy of the game board \n     */\n\n  }, {\n    key: \"move\",\n\n    /**\n     * moves the tile at the given (i,j) cordinates \n     * to the current empty space (only if legal)\n     * @param {*} i row index\n     * @param {*} j column index\n     */\n    value: function move(i, j) {\n      var _this = this;\n\n      var legalFriends = this.getLegalFriends(i, j);\n\n      var b2c = function b2c(_ref2) {\n        var i = _ref2.i,\n            j = _ref2.j;\n        return _this.size * j + i;\n      };\n\n      var empty = null;\n\n      if (legalFriends.some(function (box) {\n        return _this.board[b2c(empty = box)] === EMPTY;\n      })) {\n        this.board.swap(b2c(empty), b2c({\n          i: i,\n          j: j\n        }));\n        return true;\n      }\n\n      return false;\n    }\n    /**\n    * Checks if board is in win configuration.\n    */\n\n  }, {\n    key: \"checkWin\",\n    value: function checkWin() {\n      var last = this.board.length - 1;\n      return !!this.board.reduce(function (res, cur, i) {\n        return res && (cur === i + 1 || i === last);\n      });\n    }\n    /**\n    * Scrambles the board randomly in a solvable way.\n    */\n\n  }, {\n    key: \"scramble\",\n    value: function scramble() {\n      var _this2 = this;\n\n      var SCRAMBLE_FACTOR = this.board.length * 10;\n\n      var rand = function rand(min, max) {\n        return Math.floor(Math.random() * (max - min) + min);\n      };\n\n      var emptyIdx = this.board.indexOf(EMPTY);\n      var _ref3 = [emptyIdx % this.size, Math.floor(emptyIdx / this.size)],\n          i = _ref3[0],\n          j = _ref3[1];\n\n      var b2c = function b2c(_ref4) {\n        var i = _ref4.i,\n            j = _ref4.j;\n        return _this2.size * j + i;\n      };\n\n      for (var ind = 0; ind < SCRAMBLE_FACTOR; ++ind) {\n        var legalFriends = this.getLegalFriends(i, j);\n        var friend = legalFriends[rand(0, legalFriends.length)];\n        this.board.swap(b2c(friend), b2c({\n          i: i,\n          j: j\n        }));\n        i = friend.i;\n        j = friend.j;\n      }\n\n      return this.matrix;\n    }\n    /**\n     * Gets all existing tiles around a given tile (i,j)\n     * @param {Number} i \n     * @param {Number} j \n     */\n\n  }, {\n    key: \"getLegalFriends\",\n    value: function getLegalFriends(i, j) {\n      var _this3 = this;\n\n      var friends = [{\n        i: i + 1,\n        j: j\n      }, {\n        i: i - 1,\n        j: j\n      }, {\n        i: i,\n        j: j + 1\n      }, {\n        i: i,\n        j: j - 1\n      }]; // ES6 feature :  Arrow functions + Destructing assignment\n\n      var isLegal = function isLegal(_ref5) {\n        var i = _ref5.i,\n            j = _ref5.j;\n        return i < _this3.size && i >= 0 && j < _this3.size && j >= 0;\n      };\n\n      return friends.filter(isLegal);\n    }\n  }, {\n    key: \"matrix\",\n    get: function get() {\n      var _this4 = this;\n\n      return this.board.reduce(function (rows, key, index) {\n        return (index % _this4.size === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows;\n      }, []);\n    }\n  }]);\n\n  return BoardLogic;\n}();\n\nexport { BoardLogic as default };","map":{"version":3,"sources":["/Users/umerkazi/Desktop/Year Zero Studios/SlidingPuzzleGame-Master/SlidingPuzzleGame/src/BoardLogic.js"],"names":["EMPTY","Array","prototype","swap","i","j","BoardLogic","data","DEFAULT_SIZE","isArray","size","Math","ceil","sqrt","length","board","isNaN","initBord","from","_","b","legalFriends","getLegalFriends","b2c","empty","some","box","last","reduce","res","cur","SCRAMBLE_FACTOR","rand","min","max","floor","random","emptyIdx","indexOf","ind","friend","matrix","friends","isLegal","filter","rows","key","index","push"],"mappings":"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","sourcesContent":["const EMPTY = 0; \nArray.prototype.swap = function(i,j){// eslint-disable-line no-extend-native\n  [this[i],this[j]] = [this[j],this[i]];\n  return this;\n}\n\nexport default class BoardLogic{\n    /**\n     * Constructor\n     * @param {*} data can be one of three:\n     * size (number): init matrix with size number*number \n     * matrix: if array use given array as matrix\n     * other: use default size\n     */\n    constructor(data){\n        const DEFAULT_SIZE=3;\n        if(Array.isArray(data)){ // Data is Array\n          this.size=Math.ceil(Math.sqrt(data.length));\n          this.board = [...data];\n        }else{ // Data is number or undefiend\n          this.size=isNaN(data)?DEFAULT_SIZE:data;\n          this.board= this.initBord(data);\n        }\n    }\n    \n    /**\n    * Gets a new board of the given size\n    * @param {Number} size amount of Boxes per row\n    */\n    initBord(size){\n     return Array.from({length:size*size},(_,b)=>b);\n    }\n    \n    /**\n     * Getter, return a copy of the game board \n     */\n    get matrix() {\n      return this.board.reduce(\n        (rows, key, index) => (index % this.size === 0 ? \n        rows.push([key]) : rows[rows.length-1].push(key)) && rows, []);\n    }\n     \n    /**\n     * moves the tile at the given (i,j) cordinates \n     * to the current empty space (only if legal)\n     * @param {*} i row index\n     * @param {*} j column index\n     */\n    move(i,j){\n      let legalFriends = this.getLegalFriends(i,j);\n      let b2c = ({i,j}) => this.size*j+i;\n      let empty = null;\n      if(legalFriends.some(box=>(this.board[b2c(empty=box)] === EMPTY))){\n         this.board.swap(b2c(empty),b2c({i,j}));\n         return true;\n      }\n      return false;\n    }\n\n     /**\n     * Checks if board is in win configuration.\n     */\n    checkWin(){\n      let last = this.board.length-1;\n      return !!this.board.reduce((res,cur,i)=>res && (cur===(i+1) || i===last));\n    }\n    \n     /**\n     * Scrambles the board randomly in a solvable way.\n     */\n    scramble(){\n       const SCRAMBLE_FACTOR = this.board.length*10;\n       let rand = (min, max) => Math.floor(Math.random() * (max - min) + min);\n       let emptyIdx = this.board.indexOf(EMPTY);\n       let [i,j] = [emptyIdx%this.size,Math.floor(emptyIdx/this.size)];\n       let b2c = ({i,j}) => this.size*j+i;\n\n       for(let ind=0;ind<SCRAMBLE_FACTOR;++ind){\n         let legalFriends = this.getLegalFriends(i,j);\n         let friend = legalFriends[rand(0,legalFriends.length)];\n         this.board.swap(b2c(friend),b2c({i,j}));\n         ({i,j} = friend);\n       }\n       return this.matrix;\n    }\n\n    /**\n     * Gets all existing tiles around a given tile (i,j)\n     * @param {Number} i \n     * @param {Number} j \n     */\n    getLegalFriends(i,j){\n      let friends = [{ i: i + 1, j }, { i: i - 1, j }, \n                     { i, j: j + 1 }, { i, j: j - 1 }];\n      // ES6 feature :  Arrow functions + Destructing assignment\n      let isLegal = ({ i, j }) => (i < this.size && i >= 0 && \n                                   j < this.size && j >= 0);\n      return friends.filter(isLegal);\n    }\n\n}\n  \n"]},"metadata":{},"sourceType":"module"}